# idempotency_key: gh-actions-ci-smoke-2025-10-22-net-v1
name: CI Smoke
on:
  workflow_dispatch: {}
  push: { branches: [ main ] }
  pull_request: {}

permissions: { contents: read }
concurrency: { group: ci-smoke-${{ github.ref }}, cancel-in-progress: true }

jobs:
  smoke:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Prep env path for compose
        shell: bash
        run: |
          set -euxo pipefail
          sudo mkdir -p /srv-2/secrets/ai-stack
          sudo tee /srv-2/secrets/ai-stack/ai-stack.env >/dev/null <<'E'
          # minimal CI env; keep empty unless needed by app
          E

      - name: Compose up
        shell: bash
        run: |
          set -euxo pipefail
          docker compose -f docker-compose.yml up -d --build ai-router
          for i in {1..60}; do curl -fsS http://localhost:8082/healthz && break || sleep 1; done

      - name: Detect compose network
        shell: bash
        run: |
          set -euo pipefail
          CID=$(docker compose -f docker-compose.yml ps -q ai-router)
          NET=$(docker inspect -f '{{range $k,$v := .NetworkSettings.Networks}}{{$k}}{{end}}' "$CID")
          echo "NET=$NET" >> "$GITHUB_ENV"

      - name: Verify endpoints
        shell: bash
        run: |
          set -euxo pipefail
          curl -fsS http://localhost:8082/healthz | python3 -m json.tool | tee /tmp/healthz.json
          curl -fsS http://localhost:8082/v1/models | python3 -m json.tool | tee /tmp/models.json

      - name: k6 via container (compose network)
        shell: bash
        run: |
          set -euo pipefail
          docker run --rm --network "$NET" \
            -e BASE_URL=http://ai-router:8082 \
            -v "${{ github.workspace }}/tests:/scripts:ro" \
            -v "${{ runner.temp }}:/out" \
            grafana/k6 run --summary-export /out/k6_models.json /scripts/k6_models.js | tee "$RUNNER_TEMP/k6_stdout.log"

      - name: Collect logs
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          docker compose -f docker-compose.yml ps > "$RUNNER_TEMP/compose_ps.txt" || true
          docker compose -f docker-compose.yml logs --no-color > "$RUNNER_TEMP/compose.log" || true
          CID="$(docker compose -f docker-compose.yml ps -q ai-router || true)"
          [ -n "$CID" ] && docker logs "$CID" > "$RUNNER_TEMP/router.log" || true

      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-artifacts
          retention-days: 7
          if-no-files-found: warn
          path: |
            ${{ runner.temp }}/k6_models.json
            ${{ runner.temp }}/k6_stdout.log
            ${{ runner.temp }}/healthz.json
            ${{ runner.temp }}/models.json
            ${{ runner.temp }}/compose.log
            ${{ runner.temp }}/router.log
            ${{ runner.temp }}/compose_ps.txt

      - name: Gate p95<1200 & err<1% (with fallback)
        shell: bash
        run: |
          P95=$(jq -r '.metrics.http_req_duration.values["p(95)"] // .metrics.http_req_duration["p(95)"] // empty' "$RUNNER_TEMP/k6_models.json");
          ERR=$(jq -r '.metrics.http_req_failed.values.rate // .metrics.http_req_failed.rate // 0' "$RUNNER_TEMP/k6_models.json");
          [ -z "$P95" ] && P95=$(grep -E '\{ *ep:models *\}.*p\(95\)=' "$RUNNER_TEMP/k6_stdout.log" | sed -E 's/.*p\(95\)=([0-9.]+)(µs|ms).*/\1 \2/' | tail -1 | awk '{print ($2=="µs")?$1/1000:$1}');
          echo "p95_ms=$P95 err_rate=$ERR";
          awk -v p="$P95" -v e="$ERR" 'BEGIN{ if(p=="" || p+0>=1200 || e+0>=0.01) exit 1 }'

      - name: Teardown
        if: always()
        shell: bash
        run: docker compose -f docker-compose.yml down -v || true
